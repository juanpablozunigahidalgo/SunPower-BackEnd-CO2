SunPowerScope — Run Instructions
Juan Pablo Zuñiga Hidalgo
Date: Oct 2025

=================================================
1. Overview
=================================================
This project is a proof-of-concept sustainability platform.

It has:
- A Python backend (FastAPI + SQLAlchemy) that calculates a company's CO₂ emissions and how much of those emissions are compensated by solar projects.
- A React + Vite + TypeScript frontend dashboard that displays those metrics.

You will be able to:
- Create a company
- Add activity data (electricity use, etc.)
- Add a solar project
- Allocate a share of that solar project to the company
- See Gross vs Compensated vs Net emissions in the dashboard

Front end runs on http://localhost:5173
Back end runs on http://localhost:8000


=================================================
2. Requirements
=================================================

Backend:
- Python 3.11+ recommended (3.10+ should work)
- pip

Frontend:
- Node.js 20.x (20.9.0 works)
- npm

No paid services are required. Database is local SQLite.


=================================================
3. Backend Setup (FastAPI service)
=================================================

1. Open a terminal in:
   SunPower-BackEnd-CO2/

2. Create and activate a virtual environment:
   Windows PowerShell:
     python -m venv .venv
     .\.venv\Scripts\Activate.ps1

   (If you already have .venv, just activate it)

3. Install dependencies:
     pip install -r requirements.txt

4. Copy environment defaults:
     cp .env.example .env
   or just make sure .env exists with:
     DATABASE_URL=sqlite:///./sunpower.db

5. Run the API:
     uvicorn app.main:app --reload

6. Open the interactive Swagger docs in your browser:
     http://127.0.0.1:8000/docs

At this point the backend is up. You’ll see autogenerated API docs.

The backend will also create a local SQLite DB file:
     sunpower.db


=================================================
4. Seeding sample data using Swagger
=================================================

In Swagger (http://127.0.0.1:8000/docs), do these calls in order:

A) Create a company
   POST /companies/
   Body:
   {
     "name": "EcoPlast Inc.",
     "sector": "Manufacturing",
     "country": "US"
   }

   Response will include "id". We'll assume id = 1.

B) Add an activity for that company
   POST /activities/
   Body:
   {
     "company_id": 1,
     "category": "electricity",
     "amount": 15000,
     "unit": "kWh",
     "date": "2025-02-15"
   }

   This simulates electricity consumed by the company.

C) Register a solar project
   POST /solar/projects/
   Body:
   {
     "name": "SunPower Desert Array",
     "location_country": "US",
     "capacity_kwp": 5000,
     "performance_ratio": 0.82,
     "peak_sun_hours_per_day": 5.5,
     "grid_factor_kg_per_kwh": 0.35,
     "commissioning_date": "2024-03-01"
   }

   This simulates a clean solar installation.

D) Allocate part of that solar project to the company
   POST /solar/allocations/
   Body:
   {
     "company_id": 1,
     "project_id": 1,
     "allocation_fraction": 0.1,
     "start_date": "2025-01-01",
     "end_date": "2025-12-31"
   }

   allocation_fraction = 0.1 means the company gets 10% of the solar project's avoided CO₂.

E) Test the calculation
   GET /companies/1/net-emissions?date_from=2025-01-01&date_to=2025-12-31

   You should get a response like:
   {
     "gross_emissions_kg": 5250.0,
     "compensated_kg": 4800.0,
     "net_emissions_kg": 450.0,
     "by_category": {
       "electricity": 5250.0
     }
   }

   Meaning:
   - gross_emissions_kg = what the company emitted
   - compensated_kg = what the solar project "offset"
   - net_emissions_kg = after compensation
   - by_category = breakdown (electricity, diesel, etc.)


=================================================
5. Frontend Setup (React dashboard)
=================================================

The frontend lives in:
   SunPower-BackEnd-CO2/
   ├─ package.json
   ├─ tsconfig.json
   ├─ vite.config.ts
   ├─ index.html
   └─ src/
       ├─ main.tsx
       ├─ App.tsx
       └─ api.ts(x)

(We kept frontend inside the same repo root for simplicity.)

1. In a NEW terminal (keep backend running), cd into the same root:
     cd SunPower-BackEnd-CO2

2. Install Node deps:
     npm install

3. Start the frontend dev server:
     npm run dev

4. Open:
     http://localhost:5173

You should now see the dashboard UI.


=================================================
6. What the dashboard shows
=================================================

The dashboard will show:
- Company ID and reporting period
- Gross emissions (kg CO₂e)
- Solar compensation (kg CO₂e avoided thanks to allocated solar)
- Net emissions (Gross - Compensation, floored at 0)
- Breakdown by category (ex: "electricity", "diesel", etc.)

If there is no activity yet, you'll see:
"No activity recorded for this period."

If there is activity, you'll see totals per category.

This data is live from the backend API call:
GET /companies/{id}/net-emissions


=================================================
7. Common issues
=================================================

Q: I see an error in the dashboard that says
   "Could not load data..."
A: Most common reasons:
   - Backend is not running on http://localhost:8000
   - CORS is not enabled
   - There is no company/activity/solar allocation data yet

Make sure app/main.py in the backend includes:

    from fastapi.middleware.cors import CORSMiddleware

    app.add_middleware(
        CORSMiddleware,
        allow_origins=["http://localhost:5173", "http://127.0.0.1:5173"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

Restart uvicorn after making that change.


=================================================
8. Summary
=================================================

By the end:
- Backend is running at http://127.0.0.1:8000/docs
- Frontend is running at http://localhost:5173
- Dashboard shows gross vs compensated vs net CO₂
- You can explain solar offset logic with real numbers

This is the minimal reproducible demo.
